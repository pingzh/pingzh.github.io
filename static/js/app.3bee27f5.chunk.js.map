{"version":3,"sources":["App.js"],"names":["theme","extendTheme","fonts","heading","body","mono","App","useState","spxOpenPrice","setSpxOpenPrice","calculatePutRange","perc","legs","putLeg","floor","Math","lastDigit","upperLeg","toFixed","calculateCallRange","callLeg","ceil","lowerLeg","pt","pb","alignSelf","space","alignItems","size","pl","mb","fontSize","w","fontWeight","keyboardType","onChangeText","newPrice","onPress","Keyboard","dismiss","map","dailyReturnStd","my","color"],"mappings":"2PAkBMA,EAAQC,YAAY,CAExBC,MAAO,CACLC,QAAS,cACTC,KAAM,cACNC,KAAM,iBAIK,SAASC,IACtB,MAAwCC,mBAAS,GAAjD,WAAOC,EAAP,KAAqBC,EAArB,KAKA,SAASC,EAAkBF,EAAcG,GACvC,GAAoB,GAAhBH,EACF,MAAO,IAET,IAIII,EAJEC,EAAUL,GAAgB,EAAIG,EAAO,KACrCG,EAAQC,KAAKD,MAAMD,GACnBG,EAAYF,EAAQ,GAGtBG,EAAWH,EAQf,OAPIE,EAAY,EACdC,EAAWH,GAASE,EAAY,GACvBA,EAAY,IACrBC,EAAWH,EAAQE,GAErBJ,EAAUK,EAAW,EAAjB,MAAwBA,EAElBJ,EAAOK,QAAQ,GAAzB,MAAiCN,EAGnC,SAASO,EAAmBX,EAAcG,GACxC,GAAoB,GAAhBH,EACF,MAAO,IAET,IAIII,EAJEQ,EAAWZ,GAAgB,EAAIG,EAAO,KACtCU,EAAMN,KAAKM,KAAKD,GAChBJ,EAAYK,EAAO,GAGrBC,EAAWD,EAUf,OATIL,EAAY,EAEdM,EAAWD,GAAQ,GAAKL,GACfA,EAAY,GAAkB,GAAbA,IAE1BM,EAAWD,GAAQ,EAAIL,IAEzBJ,EAAUU,EAAN,OAAoBA,EAAW,GAEzBF,EAAQF,QAAQ,GAA1B,MAAkCN,EAKpC,OACE,eAAC,IAAD,CAAoBZ,MAAOA,EAA3B,UACE,cAAC,IAAD,CAAKuB,GAAI,GAAIC,GAAI,EAAGC,UAAU,SAA9B,SACE,cAAC,IAAD,CAAQC,MAAO,EAAGC,WAAW,SAA7B,SACE,cAAC,IAAD,CAASC,KAAK,KAAd,2CAIJ,eAAC,IAAD,CAAQF,MAAO,EAAGC,WAAW,SAASE,GAAI,EAAGC,GAAI,EAAjD,UACE,cAAC,IAAD,CAAMC,SAAS,KAAKC,EAAE,MAAMC,WAAW,SAAvC,sBACA,cAAC,IAAD,CAAOF,SAAS,KAAKG,aAAa,cAAcF,EAAE,MAAMG,aAAc,SAACC,GAAD,OAAc3B,EAAgB2B,SAGtG,cAAC,IAAD,CAAWC,QAASC,IAASC,QAA7B,SAdoB,CAAC,CAAC,KAAM,aAAc,eAAgB,CAAC,IAAM,aAAc,eAAgB,CAAC,IAAM,eAAgB,aAerGC,KAAI,SAAAC,GACpB,OAAO,eAAC,IAAD,CAAQf,MAAO,EAAIM,EAAE,OAArB,UACJ,cAAC,IAAD,CAASU,GAAG,MACZ,eAAC,IAAD,CAAQhB,MAAO,EAAGC,WAAW,SAASE,GAAI,EAA1C,UACI,cAAC,IAAD,CAAME,SAAS,KAAOC,EAAE,MAAxB,mBACA,eAAC,IAAD,CAAMD,SAAS,KAAMC,EAAE,MAAvB,UAA+BS,EAAe,GAA9C,OAAsDA,EAAe,GAArE,UAEJ,eAAC,IAAD,CAAQf,MAAO,EAAGC,WAAW,SAASE,GAAI,EAA1C,UACI,cAAC,IAAD,CAAME,SAAS,KAAOC,EAAE,MAAxB,mBACA,eAAC,IAAD,CAAMD,SAAS,KAAKY,MAAM,gBAAgBX,EAAE,MAAOC,WAAW,SAA9D,UAAyEvB,EAAkBF,EAAciC,EAAe,IAAxH,UAEJ,eAAC,IAAD,CAAQf,MAAO,EAAGC,WAAW,SAASE,GAAI,EAA1C,UACI,cAAC,IAAD,CAAOE,SAAS,KAAMC,EAAE,MAAxB,oBACA,eAAC,IAAD,CAAMD,SAAS,KAAKY,MAAM,eAAeX,EAAE,MAAOC,WAAW,SAA7D,UAAwEd,EAAmBX,EAAciC,EAAe,IAAxH,YAZiCA,EAAe,c","file":"static/js/app.3bee27f5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Keyboard } from 'react-native'\nimport {\n  Text,\n  Divider,\n  HStack,\n  Input,\n  Heading,\n  Switch,\n  useColorMode,\n  NativeBaseProvider,\n  Pressable,\n  VStack,\n  Box,\n  extendTheme,\n} from \"native-base\";\n\n\nconst theme = extendTheme({\n  // Make sure values below matches any of the keys in `fontConfig`\n  fonts: {\n    heading: \"Courier New\",\n    body: \"Courier New\",\n    mono: \"Courier New\",\n  },\n});\n\nexport default function App() {\n  const [spxOpenPrice, setSpxOpenPrice] = useState(0);\n\n  // round down to either 0 or 5 for puts\n  // for example, if it is 2, --> 0, if it is 6 --> 5\n  // round up to either 0 or 5 for calls\n  function calculatePutRange(spxOpenPrice, perc) {\n    if (spxOpenPrice == 0) {\n      return \"0\"\n    }\n    const putLeg = (spxOpenPrice * (1 - perc / 100)) // .toFixed(2)\n    const floor = Math.floor(putLeg)\n    const lastDigit = floor % 10\n\n    let legs = \"\"\n    let upperLeg = floor;\n    if (lastDigit > 5) {\n      upperLeg = floor - (lastDigit - 5);\n    } else if (lastDigit < 5) {\n      upperLeg = floor - lastDigit;\n    }\n    legs = `${upperLeg - 5} - ${upperLeg}`\n\n    return `${putLeg.toFixed(2)} @ ${legs}`\n  }\n\n  function calculateCallRange(spxOpenPrice, perc) {\n    if (spxOpenPrice == 0) {\n      return \"0\"\n    }\n    const callLeg = (spxOpenPrice * (1 + perc / 100));\n    const ceil= Math.ceil(callLeg);\n    const lastDigit = ceil % 10;\n\n    let legs = \"\";\n    let lowerLeg = ceil\n    if (lastDigit > 5) {\n      // so that 3876.40 (8) --> 3880 - 3885\n      lowerLeg = ceil + (10 - lastDigit);\n    } else if (lastDigit < 5 && lastDigit != 0) {\n      // so that 3872.40 --> 3875 - 3880\n      lowerLeg = ceil + (5 - lastDigit);\n    }\n    legs = `${lowerLeg} - ${lowerLeg + 5}`\n\n    return `${callLeg.toFixed(2)} @ ${legs}`\n  }\n\n  // value, desc, textColor\n  const dailyReturnStds = [[1.16, \"Since 2020\", \"success.500\"], [0.87, \"Since 2012\", \"primary.500\"], [1.50, \"Conservative\", \"info.500\"]]\n  return (\n    <NativeBaseProvider theme={theme}>\n      <Box pt={10} pb={5} alignSelf=\"center\">\n        <HStack space={5} alignItems=\"center\">\n          <Heading size=\"lg\">SPX Iron Conor Calculator</Heading>\n        </HStack>\n      </Box>\n\n      <HStack space={2} alignItems=\"center\" pl={8} mb={1}>\n        <Text fontSize=\"xl\" w=\"1/3\" fontWeight=\"medium\">SPX Open</Text>\n        <Input fontSize=\"xl\" keyboardType=\"decimal-pad\" w=\"2/4\" onChangeText={(newPrice) => setSpxOpenPrice(newPrice)}/>\n      </HStack>\n\n      <Pressable onPress={Keyboard.dismiss}>\n      {dailyReturnStds.map(dailyReturnStd=>{\n       return <VStack space={2}  w=\"100%\" key={dailyReturnStd[0]}>\n          <Divider my=\"2\" />\n          <HStack space={1} alignItems=\"center\" pl={8}>\n              <Text fontSize=\"xl\"   w=\"1/4\">Std: </Text>\n              <Text fontSize=\"xl\"  w=\"3/4\" >{dailyReturnStd[0]} % ({dailyReturnStd[1]})</Text>\n          </HStack>\n          <HStack space={1} alignItems=\"center\" pl={8}>\n              <Text fontSize=\"xl\"   w=\"1/4\">Put: </Text>\n              <Text fontSize=\"xl\" color=\"secondary.400\" w=\"3/4\"  fontWeight=\"medium\" >{calculatePutRange(spxOpenPrice, dailyReturnStd[0])} </Text>\n          </HStack>\n          <HStack space={1} alignItems=\"center\" pl={8}>\n              <Text  fontSize=\"xl\"  w=\"1/4\">Call: </Text>\n              <Text fontSize=\"xl\" color=\"tertiary.400\" w=\"3/4\"  fontWeight=\"medium\" >{calculateCallRange(spxOpenPrice, dailyReturnStd[0])} </Text>\n          </HStack>\n        </VStack>\n      })}\n      </Pressable>\n\n\n    </NativeBaseProvider>\n  );\n}\n"],"sourceRoot":""}